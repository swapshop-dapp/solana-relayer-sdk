/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateAnOrder
 * @category generated
 */
export type CreateAnOrderInstructionArgs = {
  orderSalt: Uint8Array
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category CreateAnOrder
 * @category generated
 */
export const createAnOrderStruct = new beet.FixableBeetArgsStruct<
  CreateAnOrderInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['orderSalt', beet.bytes],
    ['amount', beet.u64],
  ],
  'CreateAnOrderInstructionArgs'
)
/**
 * Accounts required by the _createAnOrder_ instruction
 *
 * @property [_writable_] mint
 * @property [] config
 * @property [_writable_] tmpTokenAccount
 * @property [_writable_] orderAccount
 * @property [_writable_, **signer**] seller
 * @property [_writable_, **signer**] goswapshop
 * @category Instructions
 * @category CreateAnOrder
 * @category generated
 */
export type CreateAnOrderInstructionAccounts = {
  mint: web3.PublicKey
  config: web3.PublicKey
  tmpTokenAccount: web3.PublicKey
  orderAccount: web3.PublicKey
  seller: web3.PublicKey
  goswapshop: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createAnOrderInstructionDiscriminator = [
  212, 235, 248, 59, 27, 145, 211, 56,
]

/**
 * Creates a _CreateAnOrder_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateAnOrder
 * @category generated
 */
export function createCreateAnOrderInstruction(
  accounts: CreateAnOrderInstructionAccounts,
  args: CreateAnOrderInstructionArgs,
  programId = new web3.PublicKey('2gjgMP2Z9ESfnLMAPvDonNnNUTjVq9eJvvvs9wgJsuUp')
) {
  const [data] = createAnOrderStruct.serialize({
    instructionDiscriminator: createAnOrderInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tmpTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.orderAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.seller,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.goswapshop,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
