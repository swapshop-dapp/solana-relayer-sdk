/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RedeemWrappedTransferWithPayload
 * @category generated
 */
export type RedeemWrappedTransferWithPayloadInstructionArgs = {
  vaaHash: number[] /* size: 32 */
}
/**
 * @category Instructions
 * @category RedeemWrappedTransferWithPayload
 * @category generated
 */
export const redeemWrappedTransferWithPayloadStruct = new beet.BeetArgsStruct<
  RedeemWrappedTransferWithPayloadInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['vaaHash', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  'RedeemWrappedTransferWithPayloadInstructionArgs'
)
/**
 * Accounts required by the _redeemWrappedTransferWithPayload_ instruction
 *
 * @property [_writable_, **signer**] seller
 * @property [] config
 * @property [] foreignContract
 * @property [_writable_] tokenBridgeWrappedMint
 * @property [_writable_] bridgeTmpTokenAccount
 * @property [_writable_] tmpTokenAccount
 * @property [_writable_] orderAccount
 * @property [] wormholeProgram
 * @property [] tokenBridgeProgram
 * @property [] tokenBridgeWrappedMeta
 * @property [] tokenBridgeConfig
 * @property [] vaa
 * @property [_writable_] tokenBridgeClaim
 * @property [] tokenBridgeForeignEndpoint
 * @property [] tokenBridgeMintAuthority
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category RedeemWrappedTransferWithPayload
 * @category generated
 */
export type RedeemWrappedTransferWithPayloadInstructionAccounts = {
  seller: web3.PublicKey
  config: web3.PublicKey
  foreignContract: web3.PublicKey
  tokenBridgeWrappedMint: web3.PublicKey
  bridgeTmpTokenAccount: web3.PublicKey
  tmpTokenAccount: web3.PublicKey
  orderAccount: web3.PublicKey
  wormholeProgram: web3.PublicKey
  tokenBridgeProgram: web3.PublicKey
  tokenBridgeWrappedMeta: web3.PublicKey
  tokenBridgeConfig: web3.PublicKey
  vaa: web3.PublicKey
  tokenBridgeClaim: web3.PublicKey
  tokenBridgeForeignEndpoint: web3.PublicKey
  tokenBridgeMintAuthority: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const redeemWrappedTransferWithPayloadInstructionDiscriminator = [
  198, 213, 174, 102, 181, 16, 27, 252,
]

/**
 * Creates a _RedeemWrappedTransferWithPayload_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RedeemWrappedTransferWithPayload
 * @category generated
 */
export function createRedeemWrappedTransferWithPayloadInstruction(
  accounts: RedeemWrappedTransferWithPayloadInstructionAccounts,
  args: RedeemWrappedTransferWithPayloadInstructionArgs,
  programId = new web3.PublicKey('2gjgMP2Z9ESfnLMAPvDonNnNUTjVq9eJvvvs9wgJsuUp')
) {
  const [data] = redeemWrappedTransferWithPayloadStruct.serialize({
    instructionDiscriminator:
      redeemWrappedTransferWithPayloadInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.seller,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.foreignContract,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeWrappedMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bridgeTmpTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tmpTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.orderAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.wormholeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeWrappedMeta,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeConfig,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.vaa,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeClaim,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeForeignEndpoint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeMintAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
