/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RegisterForeignContract
 * @category generated
 */
export type RegisterForeignContractInstructionArgs = {
  chain: number
  address: number[] /* size: 32 */
}
/**
 * @category Instructions
 * @category RegisterForeignContract
 * @category generated
 */
export const registerForeignContractStruct = new beet.BeetArgsStruct<
  RegisterForeignContractInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['chain', beet.u16],
    ['address', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  'RegisterForeignContractInstructionArgs'
)
/**
 * Accounts required by the _registerForeignContract_ instruction
 *
 * @property [_writable_, **signer**] owner
 * @property [] config
 * @property [_writable_] foreignContract
 * @property [] tokenBridgeForeignEndpoint
 * @property [] tokenBridgeProgram
 * @category Instructions
 * @category RegisterForeignContract
 * @category generated
 */
export type RegisterForeignContractInstructionAccounts = {
  owner: web3.PublicKey
  config: web3.PublicKey
  foreignContract: web3.PublicKey
  tokenBridgeForeignEndpoint: web3.PublicKey
  tokenBridgeProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const registerForeignContractInstructionDiscriminator = [
  132, 116, 166, 248, 67, 109, 8, 227,
]

/**
 * Creates a _RegisterForeignContract_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RegisterForeignContract
 * @category generated
 */
export function createRegisterForeignContractInstruction(
  accounts: RegisterForeignContractInstructionAccounts,
  args: RegisterForeignContractInstructionArgs,
  programId = new web3.PublicKey('2gjgMP2Z9ESfnLMAPvDonNnNUTjVq9eJvvvs9wgJsuUp')
) {
  const [data] = registerForeignContractStruct.serialize({
    instructionDiscriminator: registerForeignContractInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.foreignContract,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeForeignEndpoint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
