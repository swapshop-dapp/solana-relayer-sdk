/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateRelayerFee
 * @category generated
 */
export type UpdateRelayerFeeInstructionArgs = {
  relayerFee: number
  relayerFeePrecision: number
}
/**
 * @category Instructions
 * @category UpdateRelayerFee
 * @category generated
 */
export const updateRelayerFeeStruct = new beet.BeetArgsStruct<
  UpdateRelayerFeeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['relayerFee', beet.u32],
    ['relayerFeePrecision', beet.u32],
  ],
  'UpdateRelayerFeeInstructionArgs'
)
/**
 * Accounts required by the _updateRelayerFee_ instruction
 *
 * @property [_writable_] owner
 * @property [_writable_] config
 * @category Instructions
 * @category UpdateRelayerFee
 * @category generated
 */
export type UpdateRelayerFeeInstructionAccounts = {
  owner: web3.PublicKey
  config: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateRelayerFeeInstructionDiscriminator = [
  247, 4, 34, 35, 30, 149, 78, 25,
]

/**
 * Creates a _UpdateRelayerFee_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateRelayerFee
 * @category generated
 */
export function createUpdateRelayerFeeInstruction(
  accounts: UpdateRelayerFeeInstructionAccounts,
  args: UpdateRelayerFeeInstructionArgs,
  programId = new web3.PublicKey('2gjgMP2Z9ESfnLMAPvDonNnNUTjVq9eJvvvs9wgJsuUp')
) {
  const [data] = updateRelayerFeeStruct.serialize({
    instructionDiscriminator: updateRelayerFeeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.config,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
