/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { Order, orderBeet } from '../accounts/Order'

/**
 * @category Instructions
 * @category PlaceAnOrder
 * @category generated
 */
export type PlaceAnOrderInstructionArgs = {
  order: Order
  signature: Uint8Array
}
/**
 * @category Instructions
 * @category PlaceAnOrder
 * @category generated
 */
export const placeAnOrderStruct = new beet.FixableBeetArgsStruct<
  PlaceAnOrderInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['order', orderBeet],
    ['signature', beet.bytes],
  ],
  'PlaceAnOrderInstructionArgs'
)
/**
 * Accounts required by the _placeAnOrder_ instruction
 *
 * @property [_writable_] tokenBridgeWrappedMint
 * @property [] tokenBridgeWrappedMeta
 * @property [] tokenBridgeProgram
 * @property [] config
 * @property [_writable_] tmpTokenAccount
 * @property [_writable_] orderAccount
 * @property [_writable_] buyerTokenAccount
 * @property [_writable_, **signer**] buyer
 * @category Instructions
 * @category PlaceAnOrder
 * @category generated
 */
export type PlaceAnOrderInstructionAccounts = {
  tokenBridgeWrappedMint: web3.PublicKey
  tokenBridgeWrappedMeta: web3.PublicKey
  tokenBridgeProgram: web3.PublicKey
  config: web3.PublicKey
  tmpTokenAccount: web3.PublicKey
  orderAccount: web3.PublicKey
  buyerTokenAccount: web3.PublicKey
  buyer: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const placeAnOrderInstructionDiscriminator = [
  31, 8, 0, 46, 243, 215, 169, 191,
]

/**
 * Creates a _PlaceAnOrder_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PlaceAnOrder
 * @category generated
 */
export function createPlaceAnOrderInstruction(
  accounts: PlaceAnOrderInstructionAccounts,
  args: PlaceAnOrderInstructionArgs,
  programId = new web3.PublicKey('2gjgMP2Z9ESfnLMAPvDonNnNUTjVq9eJvvvs9wgJsuUp')
) {
  const [data] = placeAnOrderStruct.serialize({
    instructionDiscriminator: placeAnOrderInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.tokenBridgeWrappedMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeWrappedMeta,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBridgeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tmpTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.orderAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.buyerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.buyer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
