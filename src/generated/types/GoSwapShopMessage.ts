/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link GoSwapShopMessage} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link GoSwapShopMessage} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type GoSwapShopMessageRecord = {
  Msg: { recipient: number[] /* size: 32 */ }
}

/**
 * Union type respresenting the GoSwapShopMessage data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isGoSwapShopMessage*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type GoSwapShopMessage = beet.DataEnumKeyAsKind<GoSwapShopMessageRecord>

export const isGoSwapShopMessageMsg = (
  x: GoSwapShopMessage
): x is GoSwapShopMessage & { __kind: 'Msg' } => x.__kind === 'Msg'

/**
 * @category userTypes
 * @category generated
 */
export const goSwapShopMessageBeet = beet.dataEnum<GoSwapShopMessageRecord>([
  [
    'Msg',
    new beet.BeetArgsStruct<GoSwapShopMessageRecord['Msg']>(
      [['recipient', beet.uniformFixedSizeArray(beet.u8, 32)]],
      'GoSwapShopMessageRecord["Msg"]'
    ),
  ],
]) as beet.FixableBeet<GoSwapShopMessage, GoSwapShopMessage>
